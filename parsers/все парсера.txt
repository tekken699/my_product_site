# artplast_parser.py
import logging
import re
from urllib.parse import quote, urljoin
from bs4 import BeautifulSoup
from driver_pool import driver_pool
from common_regex import DECIMAL_REGEX, INTEGER_REGEX, PACK_REGEX_ARTPLAST
from timer_utils import timer
from page_loader import load_page

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def parse_artplast(query: str):
    encoded_query = quote(query)
    url = f"https://spb.artplast.ru/search/?q={encoded_query}"
    logger.info("[ARTPLAST DEBUG] Request URL: %s", url)

    with timer("ArtPlast: Driver acquisition"):
        driver = driver_pool.acquire_driver(timeout=10)

    try:
        with timer("ArtPlast: Page loading and waiting"):
            page_source = load_page(driver, url, "a[href^='/tovar/']", wait_time=15, sleep_after=0.3, attempts=3)
    except Exception as e:
        logger.error("[ARTPLAST DEBUG] Ошибка при загрузке страницы: %s", e)
        page_source = ""
    finally:
        driver.delete_all_cookies()
        driver_pool.release_driver(driver)

    with timer("ArtPlast: DOM parsing"):
        soup = BeautifulSoup(page_source, "html.parser")
        product_elems = soup.find_all("a", href=lambda href: href and href.startswith("/tovar/"))
    
    products = []
    seen = set()
    for elem in product_elems:
        try:
            link = urljoin("https://spb.artplast.ru/", elem.get("href"))
            if link in seen:
                continue
            seen.add(link)
            name_elem = elem.find_next("a", class_=lambda c: c and "hover:text-violet" in c)
            name = name_elem.get_text(strip=True) if name_elem else "Без названия"
            if query.lower() not in name.lower():
                continue
            price_numeric = 0.0
            price_display = ""
            price_div = elem.find_next("div", class_=lambda c: c and "min-w-" in c)
            if price_div:
                price_span = price_div.find("span", class_=lambda c: c and "tracking-wider" in c)
                if price_span:
                    price_text = price_span.get_text(strip=True)
                    numbers = DECIMAL_REGEX.findall(price_text)
                    if numbers:
                        price_numeric = float(numbers[0].replace(',', '.'))
                    else:
                        match = INTEGER_REGEX.search(price_text)
                        price_numeric = float(match.group()) if match else 0.0
                    price_display = price_text
            avail_span = elem.find_next("span", class_=lambda c: c and ("text-green" in c or "text-orange" in c))
            availability = avail_span.get_text(strip=True) if avail_span else "Неизвестно"
            step = 1
            pack_spans = elem.find_all_next("span", class_="truncate")
            for span in pack_spans:
                alt_text = span.get_text(strip=True)
                m_alt = PACK_REGEX_ARTPLAST.search(alt_text)
                if m_alt:
                    step = int(m_alt.group(1))
                    break
            quantity = step
            img_tag = elem.find_next("img")
            img_url = ""
            if img_tag:
                img_url = img_tag.get("data-src") or img_tag.get("src") or ""
                if img_url.startswith("/"):
                    img_url = urljoin("https://spb.artplast.ru/", img_url)
            products.append({
                "name": name,
                "price": price_numeric,
                "price_display": price_display,
                "site": "ArtPlast",
                "link": link,
                "img_url": img_url,
                "quantity": quantity,
                "step": step,
                "availability": availability
            })
        except Exception as e:
            logger.error("Ошибка при парсинге товара ArtPlast: %s", e)
    return products


# gudvin_parser.py
import logging
import re
from urllib.parse import quote, urljoin
from bs4 import BeautifulSoup
from driver_pool import driver_pool
from common_regex import DECIMAL_REGEX, INTEGER_REGEX, PACK_REGEX_GUDVIN
from timer_utils import timer
from page_loader import load_page

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def parse_gudvin(query: str):
    encoded_query = quote(query)
    url = f"https://gudvin-group.ru/?search={encoded_query}&s=1"
    logger.info("[GUDVIN DEBUG] Request URL: %s", url)

    with timer("Gudvin: Driver acquisition"):
        driver = driver_pool.acquire_driver(timeout=10)

    try:
        with timer("Gudvin: Page loading and waiting"):
            page_source = load_page(driver, url, ".product-card, .product-item, .product-snippet",
                                    wait_time=15, sleep_after=0.3, attempts=3)
    except Exception as e:
        logger.error("[GUDVIN DEBUG] Ошибка при загрузке страницы: %s", e)
        page_source = ""
    finally:
        driver.delete_all_cookies()
        driver_pool.release_driver(driver)

    with timer("Gudvin: DOM parsing"):
        soup = BeautifulSoup(page_source, "html.parser")
        product_elems = soup.find_all("div", class_="product-card")
        if not product_elems:
            product_elems = soup.select("div.product-item, div.product-snippet")
            logger.info("[GUDVIN DEBUG] Использую альтернативный селектор, найдено %d элементов", len(product_elems))
    
    products = []
    for elem in product_elems:
        try:
            title_elem = elem.find("a", class_="product-title")
            title = title_elem.get_text(strip=True) if title_elem else ""
            if not title:
                img_elem = elem.find("img", alt=True)
                title = img_elem["alt"].strip() if img_elem and img_elem.has_attr("alt") else "Без названия"
            step = 1
            quantity_elem = elem.find("span", class_="product-snippet-data-quantity")
            if quantity_elem:
                text_quantity = quantity_elem.get_text(" ", strip=True)
                m = PACK_REGEX_GUDVIN.search(text_quantity)
                if m:
                    step = int(m.group(1))
            quantity = step
            price_value = 0.0
            price_elem = elem.find("span", class_="price-value")
            if not price_elem:
                price_elem = elem.find("div", class_="product-price")
            if not price_elem:
                price_container = elem.find("div", class_="product-snippet-price")
                if price_container:
                    meta_price = price_container.find("meta", itemprop="price")
                    if meta_price and meta_price.has_attr("content"):
                        price_value = float(meta_price["content"])
                    else:
                        span_price = price_container.find("span")
                        if span_price:
                            price_text = span_price.get_text(strip=True)
                            numbers = DECIMAL_REGEX.findall(price_text)
                            price_value = float(numbers[0]) if numbers else 0.0
                        else:
                            price_value = 0.0
                else:
                    price_value = 0.0
            else:
                price_text = price_elem.get_text(strip=True)
                numbers = DECIMAL_REGEX.findall(price_text)
                price_value = float(numbers[0]) if numbers else 0.0
            link_elem = elem.find("a", href=True)
            if not link_elem:
                continue
            link = urljoin("https://gudvin-group.ru/", link_elem["href"])
            img_url = None
            img_container = elem.find("div", class_="product-snippet-img")
            if img_container:
                img_tag = img_container.find("img")
                if img_tag and img_tag.has_attr("src"):
                    img_url = urljoin("https://gudvin-group.ru/", img_tag["src"])
            else:
                img_tag = elem.find("img")
                if img_tag and img_tag.has_attr("src"):
                    img_url = img_tag["src"]
            availability = "Неизвестно"
            avail_link = elem.find("link", itemprop="availability")
            if avail_link and avail_link.has_attr("href"):
                href_val = avail_link["href"].strip()
                if href_val == "http://schema.org/InStock":
                    availability = "В наличии"
                elif href_val == "http://schema.org/OutOfStock":
                    availability = "Нет в наличии"
                elif href_val == "http://schema.org/PreOrder":
                    availability = "Под заказ"
                else:
                    availability = href_val
            else:
                status_elem = elem.find("span", class_="product-snippet-data-status")
                if status_elem:
                    text_status = status_elem.get_text(strip=True).lower()
                    if "в наличии" in text_status:
                        availability = "В наличии"
                    elif "под заказ" in text_status:
                        availability = "Под заказ"
                    else:
                        availability = text_status.capitalize()
            products.append({
                "name": title,
                "price": price_value,
                "site": "Gudvin Group",
                "link": link,
                "img_url": img_url,
                "quantity": quantity,
                "step": step,
                "availability": availability
            })
        except Exception as e:
            logger.error("Ошибка при парсинге товара Gudvin: %s", e)
    return products


# hozka_parser.py
import logging
import re
from urllib.parse import quote, urljoin
from bs4 import BeautifulSoup
from driver_pool import driver_pool
from common_regex import INTEGER_REGEX
from timer_utils import timer
from page_loader import load_page

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def parse_hozka(query: str):
    normalized_query = " ".join(query.split())
    encoded_query = quote(normalized_query)
    url = f"https://hozka.pro/search?search={encoded_query}"
    logger.info("[HOZKA DEBUG] Request URL: %s", url)

    with timer("Hozka: Driver acquisition"):
        driver = driver_pool.acquire_driver(timeout=10)

    try:
        with timer("Hozka: Page loading and waiting"):
            page_source = load_page(driver, url, "a[href^='/catalog/']", wait_time=15, sleep_after=0.3, attempts=3)
    except Exception as e:
        logger.error("[HOZKA DEBUG] Ошибка при загрузке страницы: %s", e)
        page_source = ""
    finally:
        driver.delete_all_cookies()
        driver_pool.release_driver(driver)

    with timer("Hozka: DOM parsing"):
        soup = BeautifulSoup(page_source, "html.parser")
        product_elems = soup.find_all("a", href=lambda href: href and href.startswith("/catalog/"))
    
    products = []
    for elem in product_elems:
        try:
            raw_href = elem.get("href", "")
            if not raw_href.startswith("/catalog/") or "search" in raw_href:
                continue
            link = urljoin("https://hozka.pro/", raw_href)
            title_elem = elem.find("div", class_=lambda c: c and "line-clamp-2" in c)
            name = title_elem.get_text(strip=True) if title_elem else ""
            if not name:
                continue
            total_price = 0.0
            price_elem = elem.find("div", class_=lambda c: c and "font-bold" in c)
            if price_elem:
                price_text = price_elem.get_text(strip=True)
                numbers = re.findall(r'\d+[,.]\d+', price_text)
                if numbers:
                    total_price = float(numbers[0].replace(',', '.'))
                else:
                    match = re.search(r'\d+', price_text)
                    total_price = float(match.group()) if match else 0.0
            step = 1
            quantity_elem = elem.find("div", class_=lambda c: c and "mt-3" in c)
            if quantity_elem:
                qty_text = quantity_elem.get_text(strip=True)
                m = INTEGER_REGEX.search(qty_text)
                if m:
                    try:
                        step = int(m.group(0))
                    except:
                        step = 1
            unit_price = total_price / step if step > 0 else total_price
            price_display_unit = f"{unit_price:.2f} ₽/шт."
            img_tag = elem.find("img")
            img_url = ""
            if img_tag:
                img_url = img_tag.get("src") or ""
                if img_url.startswith("/"):
                    img_url = urljoin("https://hozka.pro/", img_url)
            products.append({
                "name": name,
                "price": unit_price,
                "price_display": price_display_unit,
                "site": "Hozka.pro",
                "link": link,
                "img_url": img_url,
                "quantity": step,
                "step": step,
                "availability": "В наличии"
            })
        except Exception as e:
            logger.error("Ошибка при парсинге товара Hozka: %s", e)
    return products


# newpackspb_parser.py
import logging
import re
from urllib.parse import urljoin, quote
from bs4 import BeautifulSoup
from driver_pool import driver_pool
from common_regex import DECIMAL_REGEX, INTEGER_REGEX
from timer_utils import timer
from page_loader import load_page

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def parse_newpackspb(query: str):
    encoded_query = quote(query)
    url = f"https://newpackspb.ru/?s={encoded_query}&post_type=product"
    logger.info("[NEWPACKSPB DEBUG] Request URL: %s", url)

    with timer("NewPacksPB: Driver acquisition"):
        driver = driver_pool.acquire_driver(timeout=10)

    try:
        with timer("NewPacksPB: Page loading and waiting"):
            page_source = load_page(driver, url, "a.woocommerce-LoopProduct-link",
                                    wait_time=15, sleep_after=0.3, attempts=3)
    except Exception as e:
        logger.error("[NEWPACKSPB DEBUG] Ошибка при загрузке страницы: %s", e)
        page_source = ""
    finally:
        driver.delete_all_cookies()
        driver_pool.release_driver(driver)

    with timer("NewPacksPB: DOM parsing"):
        soup = BeautifulSoup(page_source, "html.parser")
        product_elems = soup.find_all("a", class_="woocommerce-LoopProduct-link")
    
    products = []
    for elem in product_elems:
        try:
            name = elem.get_text(strip=True) if elem.get_text(strip=True) else "Без названия"
            link = elem.get("href") or url
            price_numeric = 0.0
            price_display = ""
            price_div = elem.find_next("div", class_=lambda c: c and "price-wrapper" in c)
            if price_div:
                price_span = price_div.find("span", class_=lambda c: c and "woocommerce-Price-amount" in c)
                if price_span:
                    bdi = price_span.find("bdi")
                    if bdi:
                        price_text = bdi.get_text(strip=True)
                        numbers = DECIMAL_REGEX.findall(price_text)
                        if numbers:
                            price_numeric = float(numbers[0].replace(',', '.'))
                        else:
                            match = INTEGER_REGEX.search(price_text)
                            price_numeric = float(match.group()) if match else 0.0
                        price_display = price_text
                    else:
                        price_numeric = 0.0
                        price_display = ""
                else:
                    price_numeric = 0.0
                    price_display = ""
            else:
                price_numeric = 0.0
                price_display = ""
            img_tag = elem.find_previous("img")
            img_url = ""
            if img_tag:
                img_url = img_tag.get("data-src") or img_tag.get("src") or ""
                if img_url.startswith("/"):
                    img_url = urljoin("https://newpackspb.ru/", img_url)
            quantity = 1
            products.append({
                "name": name,
                "price": price_numeric,
                "price_display": price_display,
                "site": "NewPacksPB",
                "link": link,
                "img_url": img_url,
                "quantity": quantity,
                "availability": "В наличии"
            })
        except Exception as e:
            logger.error("Ошибка при парсинге товара NewPacksPB: %s", e)
    return products


# promispb_parser.py
import logging
import re
from urllib.parse import quote, urljoin
from bs4 import BeautifulSoup
from driver_pool import driver_pool
from common_regex import DECIMAL_REGEX, INTEGER_REGEX
from timer_utils import timer
from page_loader import load_page

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def parse_promispb(query: str):
    encoded_query = quote(query)
    url = f"https://promispb.ru/search/?query={encoded_query}"
    logger.info("[PROMISPB DEBUG] Request URL: %s", url)

    with timer("Promispb: Driver acquisition"):
        driver = driver_pool.acquire_driver(timeout=10)
    try:
        with timer("Promispb: Page loading and waiting"):
            page_source = load_page(driver, url, ".products__pr-price-base, .price-wrapper",
                                    wait_time=15, sleep_after=0.3, attempts=3)
    except Exception as e:
        logger.error("[PROMISPB DEBUG] Ошибка при загрузке страницы: %s", e)
        page_source = ""
    finally:
        driver.delete_all_cookies()
        driver_pool.release_driver(driver)
    
    with timer("Promispb: DOM parsing"):
        soup = BeautifulSoup(page_source, "html.parser")
        product_elems = soup.find_all("div", class_="products__item")
    
    products = []
    for elem in product_elems:
        try:
            name_elem = elem.find("span", class_="products__item-info-name")
            name = name_elem.get_text(strip=True) if name_elem else "Без названия"
            availability = "В наличии"
            availability_div = elem.find("div", class_="products__available")
            if availability_div:
                out_of_stock = availability_div.find("div", class_="products__available-out-of-stock")
                if out_of_stock:
                    availability = out_of_stock.get_text(strip=True)
            price_numeric = 0.0
            price_display = ""
            price_wrapper = elem.find("div", class_="products__pr-price-base")
            if not price_wrapper:
                price_wrapper = elem.find("span", class_="price-wrapper")
            if not price_wrapper:
                price_query_div = elem.find("div", class_="products__zero-text")
                if price_query_div:
                    price_display = price_query_div.get_text(strip=True)
            elif price_wrapper:
                price_span = price_wrapper.find("span", class_="price")
                raw_price = price_span.get_text(strip=True) if price_span else ""
                if raw_price:
                    numbers = DECIMAL_REGEX.findall(raw_price)
                    if numbers:
                        price_numeric = float(numbers[0].replace(',', '.'))
                    else:
                        match = INTEGER_REGEX.search(raw_price)
                        price_numeric = float(match.group()) if match else 0.0
                    price_display = f"{price_numeric} ₽/шт."
            link_elem = elem.find("a", href=True)
            link = urljoin("https://promispb.ru/", link_elem["href"]) if link_elem else url
            img_tag = elem.find("img")
            img_url = ""
            if img_tag:
                img_url = img_tag.get("data-src") or img_tag.get("data-srcset") or img_tag.get("src") or ""
                if img_url.startswith("/"):
                    img_url = urljoin("https://promispb.ru/", img_url)
            step = 1
            ratio_div = elem.find("div", class_="products__pr-price-ratio")
            if ratio_div:
                ratio_span = ratio_div.find("span", class_="js-stock-base-ratio")
                if ratio_span:
                    ratio_text = ratio_span.get_text(strip=True)
                    try:
                        step = int(ratio_text.replace(" ", ""))
                    except ValueError:
                        step = 1
            quantity = step
            products.append({
                "name": name,
                "price": price_numeric if price_numeric > 0 else None,
                "price_display": price_display,
                "site": "promispb",
                "link": link,
                "img_url": img_url,
                "quantity": quantity,
                "step": step,
                "availability": availability
            })
        except Exception as e:
            logger.error("Ошибка при парсинге товара promispb: %s", e)
    return products
