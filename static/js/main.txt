// Глобальные переменные для хранения результатов поиска и текущего номера страницы для каждого магазина
let globalData = null;
let storePages = {}; // Например: { "gudvin": 0, "promispb": 0, ... } – изначально все нули

// Функция выполнения поиска: отправляем AJAX-запрос на /api/search
async function performSearch() {
  const query = document.getElementById("search-input").value.trim();
  if (!query) {
    alert("Введите поисковый запрос");
    return;
  }

  // Считываем фильтры: минимальная и максимальная цена и опция сортировки
  const minPrice = parseFloat(document.getElementById("min-price").value) || 0;
  const maxPrice = parseFloat(document.getElementById("max-price").value) || Infinity;
  const sortOption = document.getElementById("sort").value;

  // Выводим сообщение о загрузке
  document.getElementById("results").innerHTML = "<p>Загрузка товаров...</p>";

  try {
    const response = await fetch("/api/search", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ query: query })
    });
    const data = await response.json();

    // Сохраняем результаты глобально и сбрасываем пагинацию
    globalData = data;
    storePages = {};
    displayStoreProducts(minPrice, maxPrice, sortOption);
    // Прокручиваем страницу к контейнеру результатов
    document.getElementById("results").scrollIntoView({ behavior: "smooth" });
  } catch (error) {
    console.error("Ошибка запроса:", error);
    document.getElementById("results").innerHTML = "<p>Ошибка загрузки товаров</p>";
  }
}

// Функция отображения результатов по магазинам с постраничностью (6 карточек на страницу)
function displayStoreProducts(minPrice, maxPrice, sortOption) {
  const resultsContainer = document.getElementById("results");
  resultsContainer.innerHTML = "";
  let storesFound = false;
  const itemsPerPage = 5;

  // Проходим по каждому магазину в глобальных данных
  for (let store in globalData) {
    if (!Array.isArray(globalData[store])) continue;

    // Фильтрация товаров по цене
    let products = globalData[store].filter(item => item.price >= minPrice && item.price <= maxPrice);

    // Применяем сортировку при необходимости
    if (sortOption === "priceAsc") {
      products.sort((a, b) => a.price - b.price);
    } else if (sortOption === "priceDesc") {
      products.sort((a, b) => b.price - a.price);
    }

    if (products.length === 0) continue;
    storesFound = true;

    // Определяем текущую страницу для магазина
    let currentPage = storePages.hasOwnProperty(store) ? storePages[store] : 0;
    const startIndex = currentPage * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const pageProducts = products.slice(startIndex, endIndex);

    // Создаем блок для данного магазина
    const storeBlock = document.createElement("div");
    storeBlock.classList.add("store-block");

    // Заголовок магазина
    const storeHeading = document.createElement("h2");
    storeHeading.classList.add("store-heading");
    storeHeading.textContent = getStoreName(store);
    storeBlock.appendChild(storeHeading);

    // Контейнер для карточек товаров (сетка)
    const productGrid = document.createElement("div");
    productGrid.classList.add("product-grid");

    // Добавляем карточки товаров
    pageProducts.forEach(product => {
      if (!product.name || !product.link) return;
      const card = createProductCard(product);
      productGrid.appendChild(card);
    });
    storeBlock.appendChild(productGrid);

    // Блок навигации: кнопка "Вперед" сверху и кнопка "Назад" снизу
    const navContainer = document.createElement("div");
    navContainer.classList.add("store-nav");

    const nextButton = document.createElement("button");
    nextButton.textContent = "Вперед";
    nextButton.disabled = endIndex >= products.length;
    nextButton.addEventListener("click", () => {
      storePages[store] = currentPage + 1;
      displayStoreProducts(minPrice, maxPrice, sortOption);
    });

    const prevButton = document.createElement("button");
    prevButton.textContent = "Назад";
    prevButton.disabled = currentPage === 0;
    prevButton.addEventListener("click", () => {
      storePages[store] = currentPage - 1;
      displayStoreProducts(minPrice, maxPrice, sortOption);
    });

    // Располагаем навигационные кнопки вертикально: "Вперед" сверху, затем "Назад"
    navContainer.appendChild(nextButton);
    navContainer.appendChild(prevButton);
    storeBlock.appendChild(navContainer);

    resultsContainer.appendChild(storeBlock);
  }

  if (!storesFound) {
    resultsContainer.innerHTML = "<p>Товары не найдены.</p>";
  }
}

// Функция для создания карточки товара
function createProductCard(product) {
  const card = document.createElement("div");
  card.classList.add("product-card");

  const img = document.createElement("img");
  img.src = product.img_url || "placeholder.png";
  img.alt = product.name;
  img.loading = "lazy"; // Новый атрибут для ленивой загрузки
  card.appendChild(img);

  const content = document.createElement("div");
  content.classList.add("card-content");

  const title = document.createElement("h3");
  title.textContent = product.name;
  content.appendChild(title);

  const price = document.createElement("p");
  price.textContent =
    product.price_display || `${product.price.toFixed(2)} руб.`;
  content.appendChild(price);

  if (product.availability) {
    const avail = document.createElement("p");
    avail.textContent = product.availability;
    content.appendChild(avail);
  }

  const addBtn = document.createElement("button");
  addBtn.textContent = "Добавить в корзину";
  addBtn.addEventListener("click", () => addToCart(product));
  content.appendChild(addBtn);

  card.appendChild(content);

  card.addEventListener("dblclick", () => window.open(product.link, "_blank"));
  return card;
}

// Преобразование ключа магазина в читаемое имя
function getStoreName(storeKey) {
  const mapping = {
    "gudvin": "Gudvin Group",
    "promispb": "Promispb",
    "hozka": "Hozka.pro",
    "artplast": "ArtPlast",
    "newpackspb": "NewPacksPB",
    "promindus": "Promindus"
  };
  return mapping[storeKey] || storeKey.charAt(0).toUpperCase() + storeKey.slice(1);
}



// Обработчики событий
document.getElementById("search-form").addEventListener("submit", e => {
  e.preventDefault();
  performSearch();
});
document.getElementById("apply-filters").addEventListener("click", () => performSearch());
document.getElementById("checkout-btn").addEventListener("click", e => {
  e.preventDefault();
  checkoutCart();
});
